# Промышленное программирование

Лекция 2. Shell скрипты

## Поиск по именам файлов

* Для поиска файлов (и групповых операций над ними) удобно использовать утилиту find

        # Find all directories named src
        find . -name src -type d
        # Find all python files that have a folder named test in their path
        find . -path '*/test/*.py' -type f
        # Find all files modified in the last day
        find . -mtime -1
        # Find all zip files with size in range 500k to 10M
        find . -size +500k -size -10M -name '*.tar.gz'
        # Delete all files with .tmp extension
        find . -name '*.tmp' -exec rm {} \;
        # Find all PNG files and convert them to JPG
        find . -name '*.png' -exec convert {} {}.jpg \;

## Поиск по содержанию файлов

* Поиск по содержанию файлов можно сделать с помощью `grep` (`-C` - контекст вокруг совпадения, `-R` - поиск рекурсивно в директории)
* Кроме этого, можно использовать [ag](https://github.com/ggreer/the_silver_searcher)
* Для поиска уже использованной команды можно использовать `history` (обычно вместе с `grep`)

## Исполняемые файлы

* Для процессора, на самом деле, нет разницы между командами и данными - и то, и другое - последовательность байт
* В ОС семейства Unix (Linux, macOS (darwin), ...) исполняемость файла определяется не по расширению (как в Windows), а по истинности специального флага
* Посмотреть выставленные флаги (r(ead), w(rite), (e)x(ecute)) можно с помощью команды `ls -l <FILENAME>`
* Исполняемым файлом может быть как скомпилированный файл (бинарный), так и текстовый интерпретируемый файл
* Изменить флаг исполняемости можно с помощью `chmod`

## Исполняемые файлы

* Бинарный файл для корректного исполнения должен удовлетворять определенному формату (например, ELF для Linux)
* Текстовый файл при исполнении определяет интерпретатор, на вход которому должен подаваться файл, через комментарий в начале файла `#!<PATH>\n` (Shebang line)
* Для большинства (если не всех) интерпретируемых языков `#` является символом комментария, поэтому при интерпретации файла верхняя строка игнорируется
* Таким образом, можно сделать исполняемым файл, например, python программы, и для конечного пользователя не будет необходимости явным образом передавать на вход интерпретатору программу (но версию интерпретатора, зависимые пакеты и пр. все равно придется ставить)

## Shell скрипты

* Shell скрипты позволяют использовать всю мощь работы в командной строке для написания простых (и не очень) "сценариев"
* Некоторые скрипты сильно проще написать на shell, чем на другом языке программирования (например, при работе с репозиторием `git` - есть мощный `cli` клиент)
* Shell скрипты обычно имеют расширение `.sh` или никакого, конкретный интерпретатор указывается через `#!`
* Наиболее популярный интерпретатор - `bash`. По умолчанию, если скриптом планируют пользоваться другие люди, рекомендую использовать его

## Переменные

* Переменные в скрипте задаются через синтаксис `foo=bar` (если написать с пробелами `foo = bar`, то это будет интерпретироваться как команда `foo` с аргументами `=` и `bar`)
* Доступ к значениям переменных через синтаксис `$foo` (или, если есть подчеркивания в имени, `${foo_name}`) - вместо `$foo` подставится значение переменной
* Строковые значения задаются через `'` или `"`. Однако, они не эквивалентны - в строках, определенных через `'` переменные не подставляются
* Если хочется дать доступ к переменной дочерним процессам (настроить окружение), то нужно вызвать `export $foo=bar` (или `export $foo`)

## Переменные

* В списке переменных, кроме всего прочего, будут доступны переменные "внешнего" окружения и специальные переменные
* `$0` - имя команды текущего процесса; `$1`, `$2`, ... - аргументы командной строки, `$*` - список всех аргументов, `$#` - количество аргументов, `$?` - код возврата предыдущей выполненной команды
* "Вывести" результат работы команды в строку можно через `\`` - одинарные обратные кавычки (можно внутри какой-либо большей строки)
* Кроме этого, можно воспользоваться синтаксисом `$( CMD )` для подстановки вывода команды в нужное место скрипта
* Для того, чтобы вывести вывод в временный файл и подставить имя файла, можно воспользоваться синтаксисом `<( CMD )`
* Для объединения разных условий используются операторы `||` и `&&`

## Shell globbing

* Для оперирования множеством файлов можно использовать специальный синтаксис
* Символ `?` означает любой символ в имени, `*` - произвольное количество любых символов
* Можно перечислить в `{}` через запятую варианты для подстановки, если множество имен имеет общую подстроку

## Логические выражения

* Для определения истинности или ложности смотрится код возврата: 0 - истинна, !0 - ложь (см. `true` и `false`)
* Команда `[` предназначена для формирования логических выражений вида `[ EXPRESSION ]` (должны отделяться пробелом)
* `-n STRING` - истина, если длина строки ненулевая
* `-z STRING` - истина, если строка пустая
* `STRING1 = STRING2` - истина, если строки равны (и `!=` аналогично)
* `NUM1 -eq NUM2` - истина, если числа равны (аналогично `-ne`, `-gt`, `-ge`, `-lt`, `-le`)
* `-e FILENAME` - указанный путь существует (`-d` - плюс является каталогом, `-f` - плюс является обычным файлом)
* 

## Условия

        if ВЫРАЖЕНИЕ 1
        then
            НАБОР КОМАНД 1
        elif ВЫРАЖЕНИЕ 2
            НАБОР КОМАНД 2
        else
            НАБОР КОМАНД 3
        fi

* Обратите внимание на переносы строк - это все новые команды

## Выбор варианта

        case ПЕРЕМЕННАЯ in
            ВАРИАНТ1|ВАРИАНТ2|ВАРИАНТ3)
            НАБОР КОММАНД 1
            ;;
            ВАРИАНТ4)
            НАБОР КОММАНД 2
            ;;
            *)
            НАБОР КОММАНД 3
            ;;
        esac

## Циклы

        while УСЛОВИЕ
        do
        НАБОР КОММАНД
        done

        for ИМЯ in СПИСОК
        do
            НАБОР КОММАНД
        done

## Функции

        function_name () {
            commands
        }

        function function_name {
            commands
        }

* Для определения локальных переменных внутри функции - ключевое слово `local`
* Код возврата - через `return` (0 - успех, 1-255 - неуспех)
* Аргументы - через `$1`, `$2`, ...

##  Чтение и вывод

* Команда `read` читает одну строку (до символа `\n`) и сохраняет ее значение в указанной переменной (`read SOME_VAR`)
* Если поток данных завершился до ввода строки, то возвращается не нулевой код возврата
* Команда `printf` - форматированный вывод